# SPDX-FileCopyrightText: Copyright (C) Nicolas Lamirault <nicolas.lamirault@gmail.com>
# SPDX-License-Identifier: Apache-2.0

---
name: Reusable release workflow

on: # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      repository:
        description: "Image repository"
        type: string
        required: false
        # default: nlamirault/distroless/${{ github.workflow }}
      tag:
        description: "Image tag"
        type: string
        required: false
        default: "latest"
      config-dir:
        description: "Config directory"
        type: string
        required: false
        # default: images/${{ github.workflow }}
      target:
        description: "Image target"
        type: string
        required: false
        default: "prod"
      packages:
        description: "Additional packages"
        type: string
        required: false
        default: ""
      archs:
        description: "Architectures"
        type: string
        required: false
        default: "amd64,arm64"
      scan:
        description: "Enable scan"
        type: string
        required: false
        default: "true"

env:
  REGISTRY: ghcr.io

jobs:
  publish:
    permissions:
      actions: read
      attestations: write
      contents: read
      id-token: write
      packages: write
      security-events: write

    runs-on: ubuntu-latest

    outputs:
      digest: ${{ steps.digest.outputs.digest }}
      registry: ${{ steps.vars.outputs.registry }}
      image: ${{ steps.vars.outputs.image }}

    steps:
    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: Setup Crane
      uses: imjasonh/setup-crane@31b88efe9de28ae0ffa220711af4b60be9435f6e # v0.4

    - name: Install cosign
      uses: sigstore/cosign-installer@398d4b0eeef1380460a10c8013a76f728fb906ac # v3.9.1

    - name: Set Vars
      id: vars
      shell: bash
      run: |
        if [[ "${{ github.ref_name }}" != "main" ]]; then
          # export REGISTRY="ttl.sh"
          export REGISTRY=${{ env.REGISTRY }}
        else
          export REGISTRY=${{ env.REGISTRY }}
        fi
        echo "registry=${REGISTRY}" >> $GITHUB_OUTPUT
        echo "image=${REGISTRY}/${{ inputs.repository }}:${{ inputs.tag }}" >> $GITHUB_OUTPUT
        # Debug
        echo "registry=${REGISTRY}"
        echo "image=${REGISTRY}/${{ inputs.repository }}:${{ inputs.tag }}"

    - if: steps.vars.outputs.registry == 'ghcr.io'
      name: Login to GitHub Registry
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Create SBOM directory
      id: output
      shell: bash
      run: |
        mkdir -p ${{ github.workspace }}/sbom

    - if: ${{ hashFiles("${{ inputs.config-dir }}/melange.yaml") != '' }}
      name: Run Melange
      uses: chainguard-dev/actions/melange-build@v1.0.0
      with:
        workdir: ${{ inputs.config-dir }}
        config: melange.yaml
        archs: ${{ env.ARCHS }}
        signing-key-path: /work/melange.rsa
        repository-path: /work/packages
        empty-workspace: false
        sign-with-temporary-key: true

    - name: Publish image
      id: apko
      uses: chainguard-images/actions/apko-publish@v1.0.0
      with:
        config: ${{ inputs.config-dir }}/${{ inputs.target }}.yaml
        tag: ${{ steps.vars.outputs.image }}
        package-append: ${{ inputs.packages }}
        archs: ${{ inputs.archs }}
        sbom-path: ${{ github.workspace }}/sbom

    - id: digest
      shell: bash
      run: |
        echo "digest=$(crane digest ${{ steps.vars.outputs.image }})" >> $GITHUB_OUTPUT
        crane digest ${{ steps.vars.outputs.image }}

        if [[ "${{ inputs.archs }}" == *"amd64"* ]]; then
            echo "digest-amd64=$(crane digest --platform=linux/amd64 ${{ steps.vars.outputs.image }})" >> $GITHUB_OUTPUT
            crane digest --platform=linux/amd64 ${{ steps.vars.outputs.image }}
        else
            echo "AMD64 unavailable"
            echo "digest-amd64=''" >> $GITHUB_OUTPUT
        fi
        if [[ "${{ inputs.archs }}" == *"arm64"* ]]; then
            echo "digest-arm64=$(crane digest --platform=linux/arm64 ${{ steps.vars.outputs.image }})" >> $GITHUB_OUTPUT
            crane digest --platform=linux/arm64 ${{ steps.vars.outputs.image }}
        else
            echo "ARM64 unavailable"
            echo "digest-arm64=''" >> $GITHUB_OUTPUT
        fi

    - name: Sign image
      shell: bash
      env:
        COSIGN_YES: "true"
      run: |
        cosign sign \
          --recursive \
          --oidc-provider=github-actions \
          ${{ steps.vars.outputs.registry }}/${{ inputs.repository }}@${{ steps.digest.outputs.digest }}

    - name: Attest index SBOM
      shell: bash
      env:
        COSIGN_YES: "true"
      run: |
        cosign attest \
          --type=spdxjson \
          --predicate=${{ github.workspace }}/sbom/sbom-index.spdx.json \
          --oidc-provider=github-actions \
          ${{ steps.vars.outputs.registry }}/${{ inputs.repository }}@${{ steps.digest.outputs.digest }}

    - if: steps.digest.outputs.digest-amd64 != ''
      name: Attest amd64 SBOM
      shell: bash
      env:
        COSIGN_YES: "true"
      run: |
        cosign attest \
          --type=spdxjson \
          --predicate=${{ github.workspace }}/sbom/sbom-x86_64.spdx.json \
          --oidc-provider=github-actions \
          ${{ steps.vars.outputs.registry }}/${{ inputs.repository }}@${{ steps.digest.outputs.digest-amd64 }}

    - if: steps.digest.outputs.digest-arm64 != ''
      name: Attest arm64 SBOM
      shell: bash
      env:
        COSIGN_YES: "true"
      run: |
        cosign attest \
          --type=spdxjson \
          --predicate=${{ github.workspace }}/sbom/sbom-aarch64.spdx.json \
          --oidc-provider=github-actions \
          ${{ steps.vars.outputs.registry }}/${{ inputs.repository }}@${{ steps.digest.outputs.digest-arm64 }}

    - if: steps.vars.outputs.registry == 'ghcr.io'
      name: Attest build provenance
      uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0
      with:
        subject-name: ${{ steps.vars.outputs.registry }}/${{ inputs.repository }}
        subject-digest: ${{ steps.digest.outputs.digest }}
        push-to-registry: true

  slsa:
    permissions:
      actions: read
      id-token: write
      packages: write
    needs: publish
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.1.0
    with:
      image: ${{ needs.publish.outputs.image }}
      digest: ${{ needs.publish.outputs.digest }}
    secrets:
      registry-username: ${{ github.actor }}
      registry-password: ${{ secrets.GITHUB_TOKEN }}

  scan:
    if: inputs.scan == 'true'
    permissions:
      actions: read
      contents: read
      packages: read
      security-events: write
    needs: publish
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Scan image
      id: scan
      uses: anchore/scan-action@v6
      with:
        image: ${{ needs.publish.outputs.image }}
        cache-db: true
        fail-build: "false"
        severity-cutoff: "high"
        #grype-version: v0.87.0

    - name: Upload SARIF
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ${{ steps.scan.outputs.sarif }}
        category: ${{ github.workflow }}
