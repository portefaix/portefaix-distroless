# Copyright (C) Nicolas Lamirault <nicolas.lamirault@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

---
name: Image / Release

on: # yamllint disable-line rule:truthy
  push:
    tags:
    - 'v*'
  workflow_dispatch:  # Allow manual triggering

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  ARCHS: x86_64,aarch64
  FULCIO_URL: https://fulcio.sigstore.dev
  REKOR_URL: https://rekor.sigstore.dev

permissions:
  contents: read

jobs:
  publish:
    name: Release OCI image

    runs-on: ubuntu-latest

    # https://docs.github.com/en/actions/reference/authentication-in-a-workflow
    permissions:
      actions: read
      attestations: write # need for Artifact Attestations
      contents: write     # to push chart release and create a release (helm/chart-releaser-action)
      id-token: write     # needed for keyless signing
      packages: write     # needed for ghcr access

    outputs:
      digest: ${{ steps.digest.outputs.digest }}
      image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ steps.release-details.outputs.release_name }}

    steps:
    - uses: actions/checkout@v5

    - name: Populate workspace
      shell: bash
      run: |
          echo ".github/" >> .melangeignore && tree -a . \
          && sudo rm -rf /work && sudo mkdir /work

    - name: Setup QEMU
      uses: docker/setup-qemu-action@v3

    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
        sep-tags: ' '

    - name: Dependencies
      run: ./deps.sh

    - name: Install Cosign
      uses: sigstore/cosign-installer@main

    - name: Run Melange
      uses: chainguard-dev/actions/melange-build@main
      with:
        config: melange.yaml
        archs: ${{ env.ARCHS }}
        signing-key-path: /work/melange.rsa
        repository-path: /work/packages
        empty-workspace: false
        sign-with-temporary-key: true

    - name: Create temp copy of /work directory (used in next step)
      shell: bash
      run: |
        rm -rf .apko-automount && cp -r /work .apko-automount

    - name: Create SBOM directory
      id: dir-sbom
      shell: bash
      run: |
        mkdir -p ${{ github.workspace }}/sbom

    # - name: Run Apko
    #   uses: chainguard-images/actions/apko-build@main
    #   id: apko-build
    #   with:
    #     config: apko.yaml
    #     archs: ${{ env.ARCHS }}
    #     tag: ${{ steps.meta.outputs.tags }}
    #     keyring-append: /work/melange.rsa.pub
    #     automount-src: .apko-automount/.
    #     automount-dest: /work

    # - name: Load image from apko-produced tarball
    #   shell: bash
    #   run: |
    #     docker load < output.tar

    - name: Run apko publish
      uses: chainguard-images/actions/apko-publish@main
      id: apko-publish
      with:
        config: apko.yaml
        archs: ${{ env.ARCHS }}
        tag: ${{ github.ref_name }} # ${{ steps.meta.outputs.tags }}
        keyring-append: /work/melange.rsa.pub
        automount-src: .apko-automount/.
        automount-dest: /work
        sbom-path: ${{ github.workspace }}/sbom

    - name: Setup Crane
      uses: imjasonh/setup-crane@31b88efe9de28ae0ffa220711af4b60be9435f6e # v0.4

    - name: Get disgest
      id: get-digest
      shell: bash
      run: |
        echo "digest=$(crane digest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }})" >> $GITHUB_OUTPUT
        if [[ "${{ inputs.archs }}" == *"amd64"* ]]; then
            digest-amd64=$(crane digest --platform=linux/amd64 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }})"
            echo digest-amd64=$digest-amd64 >> "$GITHUB_OUTPUT"
            echo $digest-amd64
        else
            echo "digest-amd64=''" >> $GITHUB_OUTPUT
        fi
        if [[ "${{ inputs.archs }}" == *"arm64"* ]]; then
            digest-arm64=$(crane digest --platform=linux/arm64 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }})
            echo digest-arm64=$digest-arm64 >> "$GITHUB_OUTPUT"
            echo $digest-arm64
        else
          echo "digest-arm64=''" >> $GITHUB_OUTPUT
        fi

    - name: Install cosign
      uses: sigstore/cosign-installer@398d4b0eeef1380460a10c8013a76f728fb906ac # v3.9.1

    - name: Use Cosign to sign image
      id: cosign-sign
      shell: bash
      env:
        COSIGN_YES: "true"
      run: |
        artifact_digest_uri="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.get-digest.outputs.digest }}"
        cosign sign \
          --recursive \
          --oidc-provider=github-actions \
          "${artifact_digest_uri}"
        cosign verify "${artifact_digest_uri}" \
            --certificate-identity-regexp "https://github.com/${{ github.repository }}/*" \
            --certificate-oidc-issuer https://token.actions.githubusercontent.com
        echo cosign verify "${artifact_digest_uri}" \
            --certificate-identity-regexp "https://github.com/${{ github.repository }}/*" \
            --certificate-oidc-issuer https://token.actions.githubusercontent.com

    # - name: Sign image
    #   shell: bash
    #   env:
    #     COSIGN_YES: "true"
    #   run: |
    #     cosign sign \
    #       --recursive \
    #       --oidc-provider=github-actions \
    #       ${{ steps.vars.outputs.registry }}/${{ inputs.repository }}@${{ steps.digest.outputs.digest }}
    #
    - name: Use Cosign to attest index SBOM
      id: cosign-attest-index
      shell: bash
      env:
        COSIGN_YES: "true"
      run: |
        artifact_digest_uri="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.get-digest.outputs.digest }}"
        cosign attest \
          --type=spdxjson \
          --predicate=${{ github.workspace }}/sbom/sbom-index.spdx.json \
          --oidc-provider=github-actions \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.get-digest.outputs.digest }}

    - if: steps.digest.outputs.digest-amd64 != ''
      name: Use Cosign to attest amd64 SBOM
      id: cosign-attest-amd64
      shell: bash
      env:
        COSIGN_YES: "true"
      run: |
        cosign attest \
          --type=spdxjson \
          --predicate=${{ github.workspace }}/sbom/sbom-x86_64.spdx.json \
          --oidc-provider=github-actions \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.get-digest.outputs.digest-amd64 }}

    - if: steps.digest.outputs.digest-arm64 != ''
      name: Use Cosign to attest arm64 SBOM
      id: cosign-attest-arm64
      shell: bash
      env:
        COSIGN_YES: "true"
      run: |
        cosign attest \
          --type=spdxjson \
          --predicate=${{ github.workspace }}/sbom/sbom-aarch64.spdx.json \
          --oidc-provider=github-actions \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.get-digest.outputs.digest-arm64 }}

    - name: Attest build provenance
      uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        subject-digest: ${{ steps.get-digest.outputs.digest }}
        push-to-registry: true

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: image
        image-ref: ${{ steps.apko-publish.outputs.digest }}
        format: table
        exit-code: '1'
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

  slsa:
    needs:
    - publish

    permissions:
      actions: read     # To read the workflow path.
      id-token: write   # To sign the provenance.
      packages: write   # To upload assets to release.

    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.1.0
    with:
      image: ${{ needs.publish.outputs.image }}
      digest: ${{ needs.publish.outputs.digest }}
    secrets:
      registry-username: ${{ github.actor }}
      registry-password: ${{ secrets.GITHUB_TOKEN }}

  verification-with-cosign:
    needs:
    - publish
    - slsa
    runs-on: ubuntu-latest

    permissions: read-all

    steps:
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Install Cosign
      uses: sigstore/cosign-installer@398d4b0eeef1380460a10c8013a76f728fb906ac # v3.9.1

    - name: Verify image
      env:
        IMAGE: "${{ needs.publish.outputs.image }}"
        DIGEST: ${{ needs.publish.outputs.digest }}
      run: |
        cosign verify-attestation \
            --type slsaprovenance \
            --certificate-oidc-issuer https://token.actions.githubusercontent.com \
            --certificate-identity-regexp '^https://github.com/slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@refs/tags/v[0-9]+.[0-9]+.[0-9]+$' \
            $IMAGE@$DIGEST
